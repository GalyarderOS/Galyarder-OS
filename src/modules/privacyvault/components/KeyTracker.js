import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { motion } from 'framer-motion';
import { Key, Plus, AlertTriangle, CheckCircle, RotateCcw } from 'lucide-react';
import { usePrivacyStore } from '../store/privacyStore';
export function KeyTracker() {
    const { securityKeys, revokeSecurityKey, runSecurityAudit } = usePrivacyStore();
    const getKeyStatusColor = (status) => {
        switch (status) {
            case 'active': return 'text-emerald-400';
            case 'expired': return 'text-red-400';
            case 'revoked': return 'text-amber-400';
            default: return 'text-slate-400';
        }
    };
    const getKeyTypeIcon = (type) => {
        const icons = {
            api: '🔌',
            ssh: '🖥️',
            pgp: '🔐',
            certificate: '📜',
            token: '🎫'
        };
        return icons[type] || '🔑';
    };
    const isExpiringSoon = (expiryDate) => {
        if (!expiryDate)
            return false;
        const thirtyDaysFromNow = new Date();
        thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
        return new Date(expiryDate) <= thirtyDaysFromNow;
    };
    const activeKeys = securityKeys.filter(k => k.status === 'active');
    const expiredKeys = securityKeys.filter(k => k.status === 'expired');
    const expiringSoon = securityKeys.filter(k => k.status === 'active' && isExpiringSoon(k.expiryDate));
    return (_jsxs(motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { delay: 0.1 }, className: "glass-card rounded-xl p-6", children: [_jsxs("div", { className: "flex items-center justify-between mb-6", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx(Key, { className: "w-5 h-5 text-amber-400" }), _jsx("h3", { className: "text-xl font-semibold text-white", children: "Key Tracker" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsxs("button", { onClick: () => runSecurityAudit('key_rotation'), className: "flex items-center space-x-2 px-3 py-1.5 bg-purple-600 hover:bg-purple-700 rounded-lg transition-colors", children: [_jsx(RotateCcw, { className: "w-4 h-4 text-white" }), _jsx("span", { className: "text-white text-sm", children: "Audit Keys" })] }), _jsxs("button", { className: "flex items-center space-x-2 px-3 py-1.5 bg-amber-600 hover:bg-amber-700 rounded-lg transition-colors", children: [_jsx(Plus, { className: "w-4 h-4 text-white" }), _jsx("span", { className: "text-white text-sm", children: "Add Key" })] })] })] }), _jsxs("div", { className: "grid grid-cols-3 gap-4 mb-6", children: [_jsxs("div", { className: "bg-slate-800/50 rounded-lg p-4 text-center", children: [_jsx(CheckCircle, { className: "w-5 h-5 text-emerald-400 mx-auto mb-2" }), _jsx("p", { className: "text-lg font-bold text-white", children: activeKeys.length }), _jsx("p", { className: "text-xs text-slate-400", children: "Active Keys" })] }), _jsxs("div", { className: "bg-slate-800/50 rounded-lg p-4 text-center", children: [_jsx(AlertTriangle, { className: "w-5 h-5 text-amber-400 mx-auto mb-2" }), _jsx("p", { className: "text-lg font-bold text-white", children: expiringSoon.length }), _jsx("p", { className: "text-xs text-slate-400", children: "Expiring Soon" })] }), _jsxs("div", { className: "bg-slate-800/50 rounded-lg p-4 text-center", children: [_jsx("div", { className: "w-5 h-5 bg-red-400 rounded-full mx-auto mb-2" }), _jsx("p", { className: "text-lg font-bold text-white", children: expiredKeys.length }), _jsx("p", { className: "text-xs text-slate-400", children: "Expired" })] })] }), expiringSoon.length > 0 && (_jsxs("div", { className: "mb-6 p-4 bg-amber-600/20 border border-amber-600/30 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-2", children: [_jsx(AlertTriangle, { className: "w-4 h-4 text-amber-400" }), _jsx("h4", { className: "text-sm font-medium text-amber-300", children: "Keys Expiring Soon" })] }), _jsx("div", { className: "space-y-2", children: expiringSoon.map(key => (_jsxs("div", { className: "flex items-center justify-between text-sm", children: [_jsx("span", { className: "text-amber-200", children: key.name }), _jsx("span", { className: "text-amber-400", children: key.expiryDate && new Date(key.expiryDate).toLocaleDateString() })] }, key.id))) })] })), _jsxs("div", { className: "space-y-4", children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Security Keys" }), securityKeys.map((key, index) => (_jsxs(motion.div, { initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, transition: { delay: 0.1 + index * 0.1 }, className: `p-4 border rounded-lg ${key.status === 'expired' ? 'border-red-400 bg-red-400/10' :
                            isExpiringSoon(key.expiryDate) ? 'border-amber-400 bg-amber-400/10' :
                                'border-slate-700 bg-slate-800/30'}`, children: [_jsxs("div", { className: "flex items-start justify-between mb-3", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("span", { className: "text-lg", children: getKeyTypeIcon(key.type) }), _jsxs("div", { children: [_jsx("h5", { className: "text-sm font-medium text-white", children: key.name }), _jsxs("div", { className: "flex items-center space-x-2 text-xs text-slate-400", children: [_jsxs("span", { className: "capitalize", children: [key.type, " key"] }), _jsx("span", { className: getKeyStatusColor(key.status), children: key.status })] })] })] }), _jsx("div", { className: "flex items-center space-x-2", children: key.status === 'active' && (_jsx("button", { onClick: () => revokeSecurityKey(key.id), className: "text-xs text-red-400 hover:text-red-300 transition-colors", children: "Revoke" })) })] }), _jsxs("div", { className: "grid grid-cols-2 gap-4 text-xs text-slate-400", children: [_jsxs("div", { children: [_jsx("span", { className: "block", children: "Last Used:" }), _jsx("span", { className: "text-white", children: new Date(key.lastUsed).toLocaleDateString() })] }), key.expiryDate && (_jsxs("div", { children: [_jsx("span", { className: "block", children: "Expires:" }), _jsx("span", { className: `${isExpiringSoon(key.expiryDate) ? 'text-amber-400' : 'text-white'}`, children: new Date(key.expiryDate).toLocaleDateString() })] }))] }), key.permissions.length > 0 && (_jsxs("div", { className: "mt-3", children: [_jsx("span", { className: "text-xs text-slate-400 block mb-1", children: "Permissions:" }), _jsxs("div", { className: "flex flex-wrap gap-1", children: [key.permissions.slice(0, 3).map(permission => (_jsx("span", { className: "text-xs bg-slate-700 text-slate-300 px-2 py-1 rounded", children: permission }, permission))), key.permissions.length > 3 && (_jsxs("span", { className: "text-xs text-slate-400", children: ["+", key.permissions.length - 3, " more"] }))] })] }))] }, key.id)))] }), _jsxs("div", { className: "mt-6 p-4 bg-purple-600/20 rounded-lg", children: [_jsx("h4", { className: "text-sm font-medium text-purple-300 mb-2", children: "Key Rotation Recommendations" }), _jsxs("ul", { className: "text-sm text-purple-200 space-y-1", children: [_jsx("li", { children: "\u2022 Rotate API keys every 90 days" }), _jsx("li", { children: "\u2022 Update SSH keys annually or when team members change" }), _jsx("li", { children: "\u2022 Monitor key usage patterns for anomalies" }), _jsx("li", { children: "\u2022 Use key rotation automation where possible" })] })] }), _jsx("div", { className: "mt-4 p-3 bg-amber-600/20 rounded-lg", children: _jsxs("p", { className: "text-sm text-amber-300", children: ["\uD83D\uDD11 ", activeKeys.length, " active keys are protecting your systems. Regular rotation maintains security."] }) })] }));
}
