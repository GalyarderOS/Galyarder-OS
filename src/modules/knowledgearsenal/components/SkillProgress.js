import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { motion } from 'framer-motion';
import { TrendingUp, Target, Clock, Award } from 'lucide-react';
import { useKnowledgeStore } from '../store/knowledgeStore';
export function SkillProgress() {
    const { skills } = useKnowledgeStore();
    const getSkillGap = (skill) => skill.targetLevel - skill.level;
    const getRecentlyPracticed = () => {
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
        return skills.filter(skill => new Date(skill.lastPracticed) >= oneWeekAgo);
    };
    const categoryColors = {
        Programming: 'text-blue-400',
        Communication: 'text-emerald-400',
        Design: 'text-purple-400',
        Business: 'text-amber-400',
        Creative: 'text-pink-400'
    };
    return (_jsxs(motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { delay: 0.2 }, className: "glass-card rounded-xl p-6", children: [_jsxs("div", { className: "flex items-center space-x-3 mb-6", children: [_jsx(TrendingUp, { className: "w-5 h-5 text-purple-400" }), _jsx("h3", { className: "text-xl font-semibold text-white", children: "Skill Progress" })] }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 mb-6", children: [_jsxs("div", { className: "bg-slate-800/50 rounded-lg p-4 text-center", children: [_jsx(Target, { className: "w-5 h-5 text-blue-400 mx-auto mb-2" }), _jsx("p", { className: "text-lg font-bold text-white", children: skills.length }), _jsx("p", { className: "text-xs text-slate-400", children: "Total Skills" })] }), _jsxs("div", { className: "bg-slate-800/50 rounded-lg p-4 text-center", children: [_jsx(Award, { className: "w-5 h-5 text-emerald-400 mx-auto mb-2" }), _jsx("p", { className: "text-lg font-bold text-white", children: skills.filter(s => s.level >= s.targetLevel).length }), _jsx("p", { className: "text-xs text-slate-400", children: "Mastered" })] }), _jsxs("div", { className: "bg-slate-800/50 rounded-lg p-4 text-center", children: [_jsx(Clock, { className: "w-5 h-5 text-amber-400 mx-auto mb-2" }), _jsx("p", { className: "text-lg font-bold text-white", children: getRecentlyPracticed().length }), _jsx("p", { className: "text-xs text-slate-400", children: "Practiced This Week" })] }), _jsxs("div", { className: "bg-slate-800/50 rounded-lg p-4 text-center", children: [_jsx(TrendingUp, { className: "w-5 h-5 text-purple-400 mx-auto mb-2" }), _jsxs("p", { className: "text-lg font-bold text-white", children: [Math.round(skills.reduce((sum, s) => sum + s.totalHours, 0)), "h"] }), _jsx("p", { className: "text-xs text-slate-400", children: "Total Practice" })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Active Skills" }), skills.map((skill, index) => (_jsxs(motion.div, { initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, transition: { delay: 0.1 + index * 0.1 }, className: "p-4 bg-slate-800/30 rounded-lg", children: [_jsxs("div", { className: "flex items-start justify-between mb-3", children: [_jsxs("div", { className: "flex-1", children: [_jsx("h5", { className: "text-sm font-medium text-white mb-1", children: skill.name }), _jsx("p", { className: `text-xs ${categoryColors[skill.category] || 'text-slate-400'} mb-2`, children: skill.category }), _jsxs("div", { className: "flex items-center space-x-4 text-xs text-slate-400", children: [_jsxs("span", { children: ["Last practiced: ", new Date(skill.lastPracticed).toLocaleDateString()] }), _jsxs("span", { children: [skill.totalHours, "h total"] }), _jsxs("span", { children: ["Gap: ", getSkillGap(skill), " levels"] })] })] }), _jsx("div", { className: "text-right", children: _jsxs("p", { className: "text-sm font-medium text-white", children: ["Level ", skill.level, "/", skill.targetLevel] }) })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between text-xs text-slate-400", children: [_jsx("span", { children: "Current Level" }), _jsxs("span", { children: [skill.level, "/10"] })] }), _jsx("div", { className: "bg-slate-700 rounded-full h-2", children: _jsx(motion.div, { initial: { width: 0 }, animate: { width: `${(skill.level / 10) * 100}%` }, transition: { delay: 0.3 + index * 0.1, duration: 0.8 }, className: "bg-gradient-to-r from-purple-500 to-purple-400 h-2 rounded-full" }) }), _jsxs("div", { className: "flex justify-between text-xs text-slate-400", children: [_jsx("span", { children: "Target Level" }), _jsxs("span", { children: [skill.targetLevel, "/10"] })] }), _jsx("div", { className: "bg-slate-700/50 rounded-full h-1", children: _jsx(motion.div, { initial: { width: 0 }, animate: { width: `${(skill.targetLevel / 10) * 100}%` }, transition: { delay: 0.5 + index * 0.1, duration: 0.8 }, className: "bg-gradient-to-r from-emerald-500 to-emerald-400 h-1 rounded-full" }) })] }), skill.milestones.length > 0 && (_jsxs("div", { className: "mt-3", children: [_jsx("p", { className: "text-xs text-slate-400 mb-2", children: "Milestones:" }), _jsx("div", { className: "space-y-1", children: skill.milestones.slice(0, 2).map((milestone) => (_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("div", { className: `w-2 h-2 rounded-full ${milestone.completed ? 'bg-emerald-400' : 'bg-slate-600'}` }), _jsx("span", { className: `text-xs ${milestone.completed ? 'text-emerald-400' : 'text-slate-400'}`, children: milestone.title })] }, milestone.id))) })] }))] }, skill.id)))] }), _jsx("div", { className: "mt-6 p-3 bg-purple-600/20 rounded-lg", children: _jsx("p", { className: "text-sm text-purple-300", children: "\uD83D\uDE80 Focus on skills with the largest gaps to maximize your growth potential." }) })] }));
}
