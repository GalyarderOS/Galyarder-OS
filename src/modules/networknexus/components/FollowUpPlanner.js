import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { motion } from 'framer-motion';
import { Clock, AlertTriangle, CheckCircle, Plus } from 'lucide-react';
import { useNetworkStore } from '../store/networkStore';
export function FollowUpPlanner() {
    const { followUps, contacts, completeFollowUp } = useNetworkStore();
    const getContactName = (contactId) => {
        const contact = contacts.find(c => c.id === contactId);
        return contact?.name || 'Unknown Contact';
    };
    const isOverdue = (dueDate) => {
        return new Date(dueDate) < new Date();
    };
    const isDueSoon = (dueDate) => {
        const due = new Date(dueDate);
        const threeDaysFromNow = new Date();
        threeDaysFromNow.setDate(threeDaysFromNow.getDate() + 3);
        return due <= threeDaysFromNow && due >= new Date();
    };
    const pendingFollowUps = followUps.filter(f => f.status === 'pending');
    const overdueFollowUps = pendingFollowUps.filter(f => isOverdue(f.dueDate));
    const dueSoonFollowUps = pendingFollowUps.filter(f => isDueSoon(f.dueDate) && !isOverdue(f.dueDate));
    const upcomingFollowUps = pendingFollowUps.filter(f => !isOverdue(f.dueDate) && !isDueSoon(f.dueDate));
    const priorityColors = {
        high: 'border-red-400 bg-red-400/10',
        medium: 'border-amber-400 bg-amber-400/10',
        low: 'border-emerald-400 bg-emerald-400/10'
    };
    const typeIcons = {
        email: '📧',
        call: '📞',
        meeting: '🤝',
        message: '💬',
        other: '📝'
    };
    return (_jsxs(motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { delay: 0.1 }, className: "glass-card rounded-xl p-6", children: [_jsxs("div", { className: "flex items-center justify-between mb-6", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx(Clock, { className: "w-5 h-5 text-amber-400" }), _jsx("h3", { className: "text-xl font-semibold text-white", children: "Follow-Up Planner" })] }), _jsxs("button", { className: "flex items-center space-x-2 px-3 py-1.5 bg-amber-600 hover:bg-amber-700 rounded-lg transition-colors", children: [_jsx(Plus, { className: "w-4 h-4 text-white" }), _jsx("span", { className: "text-white text-sm", children: "Add Follow-Up" })] })] }), _jsxs("div", { className: "grid grid-cols-3 gap-4 mb-6", children: [_jsxs("div", { className: "bg-slate-800/50 rounded-lg p-4 text-center", children: [_jsx(AlertTriangle, { className: "w-5 h-5 text-red-400 mx-auto mb-2" }), _jsx("p", { className: "text-lg font-bold text-white", children: overdueFollowUps.length }), _jsx("p", { className: "text-xs text-slate-400", children: "Overdue" })] }), _jsxs("div", { className: "bg-slate-800/50 rounded-lg p-4 text-center", children: [_jsx(Clock, { className: "w-5 h-5 text-amber-400 mx-auto mb-2" }), _jsx("p", { className: "text-lg font-bold text-white", children: dueSoonFollowUps.length }), _jsx("p", { className: "text-xs text-slate-400", children: "Due Soon" })] }), _jsxs("div", { className: "bg-slate-800/50 rounded-lg p-4 text-center", children: [_jsx(CheckCircle, { className: "w-5 h-5 text-emerald-400 mx-auto mb-2" }), _jsx("p", { className: "text-lg font-bold text-white", children: followUps.filter(f => f.status === 'completed').length }), _jsx("p", { className: "text-xs text-slate-400", children: "Completed" })] })] }), overdueFollowUps.length > 0 && (_jsxs("div", { className: "mb-6", children: [_jsxs("h4", { className: "text-sm font-medium text-red-400 mb-4 flex items-center space-x-2", children: [_jsx(AlertTriangle, { className: "w-4 h-4" }), _jsx("span", { children: "Overdue Follow-ups" })] }), _jsx("div", { className: "space-y-3", children: overdueFollowUps.map((followUp, index) => (_jsx(motion.div, { initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, transition: { delay: 0.1 + index * 0.1 }, className: `p-4 border rounded-lg ${priorityColors[followUp.priority]} border-red-400`, children: _jsxs("div", { className: "flex items-start justify-between", children: [_jsxs("div", { className: "flex-1", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-2", children: [_jsx("span", { className: "text-lg", children: typeIcons[followUp.type] }), _jsx("h5", { className: "text-sm font-medium text-white", children: followUp.title })] }), _jsx("p", { className: "text-xs text-slate-300 mb-2", children: followUp.description }), _jsxs("div", { className: "flex items-center space-x-4 text-xs text-slate-400", children: [_jsxs("span", { children: ["with ", getContactName(followUp.contactId)] }), _jsxs("span", { className: "text-red-400", children: ["Due: ", new Date(followUp.dueDate).toLocaleDateString()] }), _jsxs("span", { className: "capitalize", children: [followUp.priority, " priority"] })] })] }), _jsx("button", { onClick: () => completeFollowUp(followUp.id), className: "ml-4 p-2 hover:bg-emerald-600/20 rounded-lg transition-colors", children: _jsx(CheckCircle, { className: "w-4 h-4 text-emerald-400" }) })] }) }, followUp.id))) })] })), dueSoonFollowUps.length > 0 && (_jsxs("div", { className: "mb-6", children: [_jsxs("h4", { className: "text-sm font-medium text-amber-400 mb-4 flex items-center space-x-2", children: [_jsx(Clock, { className: "w-4 h-4" }), _jsx("span", { children: "Due Soon" })] }), _jsx("div", { className: "space-y-3", children: dueSoonFollowUps.map((followUp, index) => (_jsx(motion.div, { initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, transition: { delay: 0.1 + index * 0.1 }, className: `p-4 border rounded-lg ${priorityColors[followUp.priority]}`, children: _jsxs("div", { className: "flex items-start justify-between", children: [_jsxs("div", { className: "flex-1", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-2", children: [_jsx("span", { className: "text-lg", children: typeIcons[followUp.type] }), _jsx("h5", { className: "text-sm font-medium text-white", children: followUp.title })] }), _jsx("p", { className: "text-xs text-slate-300 mb-2", children: followUp.description }), _jsxs("div", { className: "flex items-center space-x-4 text-xs text-slate-400", children: [_jsxs("span", { children: ["with ", getContactName(followUp.contactId)] }), _jsxs("span", { children: ["Due: ", new Date(followUp.dueDate).toLocaleDateString()] }), _jsxs("span", { className: "capitalize", children: [followUp.priority, " priority"] })] })] }), _jsx("button", { onClick: () => completeFollowUp(followUp.id), className: "ml-4 p-2 hover:bg-emerald-600/20 rounded-lg transition-colors", children: _jsx(CheckCircle, { className: "w-4 h-4 text-emerald-400" }) })] }) }, followUp.id))) })] })), upcomingFollowUps.length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-white mb-4", children: "Upcoming Follow-ups" }), _jsx("div", { className: "space-y-2", children: upcomingFollowUps.slice(0, 5).map((followUp, index) => (_jsxs(motion.div, { initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, transition: { delay: 0.1 + index * 0.1 }, className: "flex items-center justify-between p-3 bg-slate-800/30 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("span", { className: "text-sm", children: typeIcons[followUp.type] }), _jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium text-white", children: followUp.title }), _jsxs("p", { className: "text-xs text-slate-400", children: [getContactName(followUp.contactId), " \u2022 ", new Date(followUp.dueDate).toLocaleDateString()] })] })] }), _jsx("button", { onClick: () => completeFollowUp(followUp.id), className: "p-1 hover:bg-emerald-600/20 rounded transition-colors", children: _jsx(CheckCircle, { className: "w-3 h-3 text-emerald-400" }) })] }, followUp.id))) })] })), pendingFollowUps.length === 0 && (_jsxs("div", { className: "text-center py-8", children: [_jsx(CheckCircle, { className: "w-12 h-12 text-emerald-400 mx-auto mb-4" }), _jsx("p", { className: "text-slate-400", children: "All caught up! No pending follow-ups." })] })), _jsx("div", { className: "mt-6 p-3 bg-amber-600/20 rounded-lg", children: _jsx("p", { className: "text-sm text-amber-300", children: "\u23F0 Stay on top of your network by completing follow-ups on time. Consistency builds stronger relationships!" }) })] }));
}
