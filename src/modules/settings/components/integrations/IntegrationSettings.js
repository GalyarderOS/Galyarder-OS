import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Bot, Key, Check, X, RefreshCw, AlertTriangle, ExternalLink, Eye, EyeOff, Trash2 } from 'lucide-react';
import { useSettingsStore } from '../../../../lib/stores/useSettingsStore';
export function IntegrationSettings() {
    const { integrations, updateIntegration, clearIntegration, testIntegration } = useSettingsStore();
    const [testResults, setTestResults] = useState({});
    const [testingKey, setTestingKey] = useState(null);
    const [showTokens, setShowTokens] = useState({});
    const handleUpdateIntegration = (key, value) => {
        updateIntegration(key, value);
        // Clear test result when value changes
        setTestResults(prev => ({ ...prev, [key]: null }));
    };
    const handleTestIntegration = async (key) => {
        setTestingKey(key);
        setTestResults(prev => ({ ...prev, [key]: null }));
        try {
            const result = await testIntegration(key);
            setTestResults(prev => ({ ...prev, [key]: result }));
        }
        catch (error) {
            setTestResults(prev => ({ ...prev, [key]: false }));
        }
        finally {
            setTestingKey(null);
        }
    };
    const toggleShowToken = (key) => {
        setShowTokens(prev => ({ ...prev, [key]: !prev[key] }));
    };
    return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "bg-slate-800/40 backdrop-blur-xl border border-slate-700/60 rounded-2xl p-6", children: [_jsxs("h3", { className: "text-lg font-medium text-white mb-4 flex items-center space-x-2", children: [_jsx(Bot, { className: "w-5 h-5 text-purple-400" }), _jsx("span", { children: "AI Integrations" })] }), _jsx("div", { className: "p-4 bg-amber-600/10 border border-amber-600/20 rounded-lg mb-6", children: _jsxs("div", { className: "flex items-start space-x-3", children: [_jsx(AlertTriangle, { className: "w-5 h-5 text-amber-400 mt-0.5 flex-shrink-0" }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-amber-400 mb-1", children: "Security Notice" }), _jsx("p", { className: "text-xs text-amber-200", children: "Your API keys are stored locally and never shared. For extra security, consider using encrypted cloud sync or connecting via secure backend in the future." })] })] }) }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold", children: "AI" }) }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "OpenAI" }), _jsx("p", { className: "text-xs text-slate-400", children: "Connect to GPT models" })] })] }), _jsxs("a", { href: "https://platform.openai.com/api-keys", target: "_blank", rel: "noopener noreferrer", className: "text-xs text-blue-400 hover:text-blue-300 transition-colors flex items-center space-x-1", children: [_jsx("span", { children: "Get API Key" }), _jsx(ExternalLink, { className: "w-3 h-3" })] })] }), _jsxs("div", { className: "flex space-x-2", children: [_jsxs("div", { className: "relative flex-1", children: [_jsx("input", { type: showTokens.openaiKey ? 'text' : 'password', value: integrations.openaiKey, onChange: (e) => handleUpdateIntegration('openaiKey', e.target.value), placeholder: "sk-...", className: "w-full px-3 py-2 bg-slate-700 border border-slate-600 \n                           rounded-lg text-white placeholder-slate-500 \n                           focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent" }), _jsx("button", { onClick: () => toggleShowToken('openaiKey'), className: "absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-white", children: showTokens.openaiKey ? _jsx(Eye, { className: "w-4 h-4" }) : _jsx(EyeOff, { className: "w-4 h-4" }) })] }), _jsx("button", { onClick: () => handleTestIntegration('openaiKey'), disabled: !integrations.openaiKey || testingKey === 'openaiKey', className: "px-3 py-2 bg-purple-600 hover:bg-purple-700 disabled:bg-slate-700 disabled:text-slate-500 disabled:cursor-not-allowed rounded-lg text-white transition-colors flex items-center space-x-2", children: testingKey === 'openaiKey' ? (_jsx(RefreshCw, { className: "w-4 h-4 animate-spin" })) : testResults.openaiKey === true ? (_jsx(Check, { className: "w-4 h-4 text-emerald-400" })) : testResults.openaiKey === false ? (_jsx(X, { className: "w-4 h-4 text-red-400" })) : (_jsx("span", { children: "Test" })) }), integrations.openaiKey && (_jsx("button", { onClick: () => clearIntegration('openaiKey'), className: "px-3 py-2 bg-red-600/20 hover:bg-red-600/30 text-red-400 rounded-lg transition-colors", children: _jsx(Trash2, { className: "w-4 h-4" }) }))] }), testResults.openaiKey === false && (_jsx("p", { className: "text-xs text-red-400", children: "Invalid API key format or connection failed. Please check your key and try again." }))] }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold", children: "C" }) }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Anthropic Claude" }), _jsx("p", { className: "text-xs text-slate-400", children: "Connect to Claude models" })] })] }), _jsxs("a", { href: "https://console.anthropic.com/settings/keys", target: "_blank", rel: "noopener noreferrer", className: "text-xs text-blue-400 hover:text-blue-300 transition-colors flex items-center space-x-1", children: [_jsx("span", { children: "Get API Key" }), _jsx(ExternalLink, { className: "w-3 h-3" })] })] }), _jsxs("div", { className: "flex space-x-2", children: [_jsxs("div", { className: "relative flex-1", children: [_jsx("input", { type: showTokens.claudeKey ? 'text' : 'password', value: integrations.claudeKey, onChange: (e) => handleUpdateIntegration('claudeKey', e.target.value), placeholder: "sk-ant-...", className: "w-full px-3 py-2 bg-slate-700 border border-slate-600 \n                           rounded-lg text-white placeholder-slate-500 \n                           focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent" }), _jsx("button", { onClick: () => toggleShowToken('claudeKey'), className: "absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-white", children: showTokens.claudeKey ? _jsx(Eye, { className: "w-4 h-4" }) : _jsx(EyeOff, { className: "w-4 h-4" }) })] }), _jsx("button", { onClick: () => handleTestIntegration('claudeKey'), disabled: !integrations.claudeKey || testingKey === 'claudeKey', className: "px-3 py-2 bg-purple-600 hover:bg-purple-700 disabled:bg-slate-700 disabled:text-slate-500 disabled:cursor-not-allowed rounded-lg text-white transition-colors flex items-center space-x-2", children: testingKey === 'claudeKey' ? (_jsx(RefreshCw, { className: "w-4 h-4 animate-spin" })) : testResults.claudeKey === true ? (_jsx(Check, { className: "w-4 h-4 text-emerald-400" })) : testResults.claudeKey === false ? (_jsx(X, { className: "w-4 h-4 text-red-400" })) : (_jsx("span", { children: "Test" })) }), integrations.claudeKey && (_jsx("button", { onClick: () => clearIntegration('claudeKey'), className: "px-3 py-2 bg-red-600/20 hover:bg-red-600/30 text-red-400 rounded-lg transition-colors", children: _jsx(Trash2, { className: "w-4 h-4" }) }))] }), testResults.claudeKey === false && (_jsx("p", { className: "text-xs text-red-400", children: "Invalid API key format or connection failed. Please check your key and try again." }))] }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold", children: "G" }) }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Google Gemini" }), _jsx("p", { className: "text-xs text-slate-400", children: "Connect to Gemini models" })] })] }), _jsxs("a", { href: "https://ai.google.dev/tutorials/setup", target: "_blank", rel: "noopener noreferrer", className: "text-xs text-blue-400 hover:text-blue-300 transition-colors flex items-center space-x-1", children: [_jsx("span", { children: "Get API Key" }), _jsx(ExternalLink, { className: "w-3 h-3" })] })] }), _jsxs("div", { className: "flex space-x-2", children: [_jsxs("div", { className: "relative flex-1", children: [_jsx("input", { type: showTokens.geminiKey ? 'text' : 'password', value: integrations.geminiKey, onChange: (e) => handleUpdateIntegration('geminiKey', e.target.value), placeholder: "AIza...", className: "w-full px-3 py-2 bg-slate-700 border border-slate-600 \n                           rounded-lg text-white placeholder-slate-500 \n                           focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent" }), _jsx("button", { onClick: () => toggleShowToken('geminiKey'), className: "absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-white", children: showTokens.geminiKey ? _jsx(Eye, { className: "w-4 h-4" }) : _jsx(EyeOff, { className: "w-4 h-4" }) })] }), _jsx("button", { onClick: () => handleTestIntegration('geminiKey'), disabled: !integrations.geminiKey || testingKey === 'geminiKey', className: "px-3 py-2 bg-purple-600 hover:bg-purple-700 disabled:bg-slate-700 disabled:text-slate-500 disabled:cursor-not-allowed rounded-lg text-white transition-colors flex items-center space-x-2", children: testingKey === 'geminiKey' ? (_jsx(RefreshCw, { className: "w-4 h-4 animate-spin" })) : testResults.geminiKey === true ? (_jsx(Check, { className: "w-4 h-4 text-emerald-400" })) : testResults.geminiKey === false ? (_jsx(X, { className: "w-4 h-4 text-red-400" })) : (_jsx("span", { children: "Test" })) }), integrations.geminiKey && (_jsx("button", { onClick: () => clearIntegration('geminiKey'), className: "px-3 py-2 bg-red-600/20 hover:bg-red-600/30 text-red-400 rounded-lg transition-colors", children: _jsx(Trash2, { className: "w-4 h-4" }) }))] }), testResults.geminiKey === false && (_jsx("p", { className: "text-xs text-red-400", children: "Invalid API key format or connection failed. Please check your key and try again." }))] }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold", children: "OR" }) }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "OpenRouter" }), _jsx("p", { className: "text-xs text-slate-400", children: "Connect to multiple AI models" })] })] }), _jsxs("a", { href: "https://openrouter.ai/keys", target: "_blank", rel: "noopener noreferrer", className: "text-xs text-blue-400 hover:text-blue-300 transition-colors flex items-center space-x-1", children: [_jsx("span", { children: "Get API Key" }), _jsx(ExternalLink, { className: "w-3 h-3" })] })] }), _jsxs("div", { className: "flex space-x-2", children: [_jsxs("div", { className: "relative flex-1", children: [_jsx("input", { type: showTokens.openrouterKey ? 'text' : 'password', value: integrations.openrouterKey, onChange: (e) => handleUpdateIntegration('openrouterKey', e.target.value), placeholder: "sk-or-...", className: "w-full px-3 py-2 bg-slate-700 border border-slate-600 \n                           rounded-lg text-white placeholder-slate-500 \n                           focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent" }), _jsx("button", { onClick: () => toggleShowToken('openrouterKey'), className: "absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-white", children: showTokens.openrouterKey ? _jsx(Eye, { className: "w-4 h-4" }) : _jsx(EyeOff, { className: "w-4 h-4" }) })] }), _jsx("button", { onClick: () => handleTestIntegration('openrouterKey'), disabled: !integrations.openrouterKey || testingKey === 'openrouterKey', className: "px-3 py-2 bg-purple-600 hover:bg-purple-700 disabled:bg-slate-700 disabled:text-slate-500 disabled:cursor-not-allowed rounded-lg text-white transition-colors flex items-center space-x-2", children: testingKey === 'openrouterKey' ? (_jsx(RefreshCw, { className: "w-4 h-4 animate-spin" })) : testResults.openrouterKey === true ? (_jsx(Check, { className: "w-4 h-4 text-emerald-400" })) : testResults.openrouterKey === false ? (_jsx(X, { className: "w-4 h-4 text-red-400" })) : (_jsx("span", { children: "Test" })) }), integrations.openrouterKey && (_jsx("button", { onClick: () => clearIntegration('openrouterKey'), className: "px-3 py-2 bg-red-600/20 hover:bg-red-600/30 text-red-400 rounded-lg transition-colors", children: _jsx(Trash2, { className: "w-4 h-4" }) }))] }), testResults.openrouterKey === false && (_jsx("p", { className: "text-xs text-red-400", children: "Invalid API key format or connection failed. Please check your key and try again." }))] }), _jsxs("div", { className: "pt-2", children: [_jsx("h4", { className: "text-sm font-medium text-white mb-3", children: "Default AI Provider" }), _jsx("div", { className: "grid grid-cols-2 sm:grid-cols-4 gap-3", children: [
                                            { id: 'openai', name: 'OpenAI', available: !!integrations.openaiKey },
                                            { id: 'claude', name: 'Claude', available: !!integrations.claudeKey },
                                            { id: 'gemini', name: 'Gemini', available: !!integrations.geminiKey },
                                            { id: 'openrouter', name: 'OpenRouter', available: !!integrations.openrouterKey }
                                        ].map(provider => (_jsxs("button", { onClick: () => updateIntegration('defaultLLM', provider.id), disabled: !provider.available, className: `p-3 rounded-lg text-center transition-all ${integrations.defaultLLM === provider.id
                                                ? 'bg-purple-600/20 border border-purple-600/30 text-purple-400'
                                                : provider.available
                                                    ? 'bg-slate-700/50 hover:bg-slate-700 text-slate-300 border border-transparent'
                                                    : 'bg-slate-800/50 text-slate-500 cursor-not-allowed border border-transparent'}`, children: [_jsx("span", { className: "text-sm", children: provider.name }), !provider.available && (_jsx("p", { className: "text-xs text-slate-500 mt-1", children: "Not connected" }))] }, provider.id))) })] })] })] }), _jsxs("div", { className: "bg-slate-800/40 backdrop-blur-xl border border-slate-700/60 rounded-2xl p-6", children: [_jsxs("h3", { className: "text-lg font-medium text-white mb-4 flex items-center space-x-2", children: [_jsx(Key, { className: "w-5 h-5 text-emerald-400" }), _jsx("span", { children: "Other Integrations" })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold", children: "N" }) }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Notion" }), _jsx("p", { className: "text-xs text-slate-400", children: "Connect to your Notion workspace" })] })] }), _jsxs("a", { href: "https://www.notion.so/my-integrations", target: "_blank", rel: "noopener noreferrer", className: "text-xs text-blue-400 hover:text-blue-300 transition-colors flex items-center space-x-1", children: [_jsx("span", { children: "Get Integration Token" }), _jsx(ExternalLink, { className: "w-3 h-3" })] })] }), _jsxs("div", { className: "flex space-x-2", children: [_jsxs("div", { className: "relative flex-1", children: [_jsx("input", { type: showTokens.notionToken ? 'text' : 'password', value: integrations.notionToken, onChange: (e) => handleUpdateIntegration('notionToken', e.target.value), placeholder: "secret_...", className: "w-full px-3 py-2 bg-slate-700 border border-slate-600 \n                           rounded-lg text-white placeholder-slate-500 \n                           focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent" }), _jsx("button", { onClick: () => toggleShowToken('notionToken'), className: "absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-white", children: showTokens.notionToken ? _jsx(Eye, { className: "w-4 h-4" }) : _jsx(EyeOff, { className: "w-4 h-4" }) })] }), _jsx("button", { onClick: () => handleTestIntegration('notionToken'), disabled: !integrations.notionToken || testingKey === 'notionToken', className: "px-3 py-2 bg-emerald-600 hover:bg-emerald-700 disabled:bg-slate-700 disabled:text-slate-500 disabled:cursor-not-allowed rounded-lg text-white transition-colors flex items-center space-x-2", children: testingKey === 'notionToken' ? (_jsx(RefreshCw, { className: "w-4 h-4 animate-spin" })) : testResults.notionToken === true ? (_jsx(Check, { className: "w-4 h-4 text-white" })) : testResults.notionToken === false ? (_jsx(X, { className: "w-4 h-4 text-white" })) : (_jsx("span", { children: "Test" })) }), integrations.notionToken && (_jsx("button", { onClick: () => clearIntegration('notionToken'), className: "px-3 py-2 bg-red-600/20 hover:bg-red-600/30 text-red-400 rounded-lg transition-colors", children: _jsx(Trash2, { className: "w-4 h-4" }) }))] }), testResults.notionToken === false && (_jsx("p", { className: "text-xs text-red-400", children: "Invalid integration token or connection failed. Please check your token and try again." }))] }), _jsxs("div", { className: "space-y-3", children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Coming Soon" }), _jsxs("div", { className: "grid grid-cols-1 sm:grid-cols-2 gap-3", children: [_jsxs("div", { className: "flex items-center space-x-3 p-3 bg-slate-700/30 rounded-lg opacity-70", children: [_jsx("div", { className: "w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold", children: "G" }) }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Google Calendar" }), _jsx("p", { className: "text-xs text-slate-400", children: "Coming soon" })] })] }), _jsxs("div", { className: "flex items-center space-x-3 p-3 bg-slate-700/30 rounded-lg opacity-70", children: [_jsx("div", { className: "w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold", children: "T" }) }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Todoist" }), _jsx("p", { className: "text-xs text-slate-400", children: "Coming soon" })] })] }), _jsxs("div", { className: "flex items-center space-x-3 p-3 bg-slate-700/30 rounded-lg opacity-70", children: [_jsx("div", { className: "w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold", children: "S" }) }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Spotify" }), _jsx("p", { className: "text-xs text-slate-400", children: "Coming soon" })] })] }), _jsxs("div", { className: "flex items-center space-x-3 p-3 bg-slate-700/30 rounded-lg opacity-70", children: [_jsx("div", { className: "w-10 h-10 bg-slate-700 rounded-lg flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold", children: "F" }) }), _jsxs("div", { children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Fitbit" }), _jsx("p", { className: "text-xs text-slate-400", children: "Coming soon" })] })] })] })] })] })] }), _jsxs("div", { className: "bg-slate-800/40 backdrop-blur-xl border border-slate-700/60 rounded-2xl p-6", children: [_jsx("h3", { className: "text-lg font-medium text-white mb-4", children: "API Usage" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "p-4 bg-slate-700/30 rounded-lg", children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "OpenAI" }), _jsx("span", { className: "text-xs text-emerald-400", children: "Active" })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { children: [_jsxs("div", { className: "flex justify-between text-xs text-slate-400 mb-1", children: [_jsx("span", { children: "Monthly Usage" }), _jsx("span", { children: "$3.42 / $5.00" })] }), _jsx("div", { className: "bg-slate-600 rounded-full h-2", children: _jsx("div", { className: "bg-gradient-to-r from-emerald-500 to-emerald-400 h-2 rounded-full", style: { width: '68%' } }) })] }), _jsxs("div", { className: "flex justify-between text-xs", children: [_jsx("span", { className: "text-slate-400", children: "Requests this month:" }), _jsx("span", { className: "text-white", children: "142" })] }), _jsxs("div", { className: "flex justify-between text-xs", children: [_jsx("span", { className: "text-slate-400", children: "Tokens used:" }), _jsx("span", { className: "text-white", children: "28,450" })] })] })] }), _jsxs("div", { className: "p-4 bg-slate-700/30 rounded-lg", children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Claude" }), _jsx("span", { className: "text-xs text-slate-400", children: "Not connected" })] }), _jsx("div", { className: "text-center py-2", children: _jsx("p", { className: "text-xs text-slate-400", children: "Connect your Claude API key to see usage statistics" }) })] }), _jsxs("div", { className: "p-4 bg-slate-700/30 rounded-lg", children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("h4", { className: "text-sm font-medium text-white", children: "Gemini" }), _jsx("span", { className: "text-xs text-slate-400", children: "Not connected" })] }), _jsx("div", { className: "text-center py-2", children: _jsx("p", { className: "text-xs text-slate-400", children: "Connect your Gemini API key to see usage statistics" }) })] })] })] })] }));
}
